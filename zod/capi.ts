// Generated by ts-to-zod
import type { output } from "./zod.ts";
import { z } from "./zod.ts";

/** `RealPillars` have pillar palette colours */
const realPillarsSchema = z.enum([
  "news",
  "opinion",
  "sport",
  "culture",
  "lifestyle",
]);
/** `FakePillars` allow us to make modifications to style based on rules outside of the pillar of an article */
const fakePillarsSchema = z.enum(["labs"]);
/**
 * Pillars are used for styling
 * These are partialy kept for Google Analytics purposes
 */
export const legacyPillarSchema = z.union([
  realPillarsSchema,
  fakePillarsSchema,
]);

/**
 * Themes are used for styling
 * `RealPillars` have pillar palette colours and have a `Pillar` type in Scala
 * `FakePillars` allow us to make modifications to style based on rules outside of the pillar of an article and have a `Special` type in Scala
 * @see https://github.com/guardian/content-api-scala-client/blob/master/client/src/main/scala/com.gu.contentapi.client/utils/format/Theme.scala
 */
const themePillarSchema = z.enum([
  "NewsPillar",
  "OpinionPillar",
  "SportPillar",
  "CulturePillar",
  "LifestylePillar",
]);

const themeSpecialSchema = z.enum(["SpecialReportTheme", "Labs"]);

const capiThemeSchema = z.union([themePillarSchema, themeSpecialSchema]);

/**
 * `CAPIDesign` is what CAPI gives us on the Format field
 * @see https://github.com/guardian/content-api-scala-client/blob/master/client/src/main/scala/com.gu.contentapi.client/utils/format/Design.scala */
const capiDesignSchema = z.enum([
  "ArticleDesign",
  "GalleryDesign",
  "AudioDesign",
  "VideoDesign",
  "ReviewDesign",
  "AnalysisDesign",
  "CommentDesign",
  "LetterDesign",
  "FeatureDesign",
  "LiveBlogDesign",
  "DeadBlogDesign",
  "RecipeDesign",
  "MatchReportDesign",
  "InterviewDesign",
  "EditorialDesign",
  "QuizDesign",
  "InteractiveDesign",
  "PhotoEssayDesign",
  "PrintShopDesign",
  "ObituaryDesign",
  "FullPageInteractiveDesign",
  "NewsletterSignupDesign",
]);

/**
 * `CAPIDisplay` is the display information passed through from CAPI and dictates the `displaystyle` of the content e.g. Immersive
 * @see https://github.com/guardian/content-api-scala-client/blob/master/client/src/main/scala/com.gu.contentapi.client/utils/format/Display.scala */
const capiDisplaySchema = z.enum([
  "StandardDisplay",
  "ImmersiveDisplay",
  "ShowcaseDisplay",
  "NumberedListDisplay",
]);

/**
 * `CAPIFormat` is the stringified version of Format passed through from CAPI
 * It gets converted to the `@guardian/libs` format on platform
 */
export type ZCAPIFormat = output<typeof capiFormatSchema>;
export const capiFormatSchema = z.object({
  design: capiDesignSchema,
  theme: capiThemeSchema,
  display: capiDisplaySchema,
});
