// Generated by ts-to-zod
import type { output } from "./zod.ts";
import { z } from "./zod.ts";
import { legacyPillarSchema } from "./capi.ts";

const readerRevenueCategoriesSchema = z.object({
  contribute: z.string(),
  subscribe: z.string(),
  support: z.string(),
  supporter: z.string(),
  gifting: z.string().optional(),
});

const readerRevenuePositionsSchema = z.object({
  header: readerRevenueCategoriesSchema,
  footer: readerRevenueCategoriesSchema,
  sideMenu: readerRevenueCategoriesSchema,
  ampHeader: readerRevenueCategoriesSchema,
  ampFooter: readerRevenueCategoriesSchema,
});

export const readerRevenuePositionSchema = z.any();

interface FELinkType {
  url: string;
  title: string;
  longTitle?: string;
  iconName?: string;
  children?: FELinkType[];
  pillar?: output<typeof legacyPillarSchema>;
  more?: boolean;
  classList?: string[];
}

export const feLinkTypeSchema: z.ZodSchema<FELinkType> = z.lazy(() =>
  z.object({
    url: z.string(),
    title: z.string(),
    longTitle: z.string().optional(),
    iconName: z.string().optional(),
    children: z.array(feLinkTypeSchema).optional(),
    pillar: legacyPillarSchema.optional(),
    more: z.boolean().optional(),
    classList: z.array(z.string()).optional(),
  })
);

export const feNavTypeSchema = z.object({
  currentUrl: z.string(),
  pillars: z.array(feLinkTypeSchema),
  otherLinks: z.array(feLinkTypeSchema),
  brandExtensions: z.array(feLinkTypeSchema),
  currentNavLink: feLinkTypeSchema.optional(),
  currentNavLinkTitle: z.string().optional(),
  currentPillarTitle: z.string().optional(),
  subNavSections: z
    .object({
      parent: feLinkTypeSchema.optional(),
      links: z.array(feLinkTypeSchema),
    })
    .optional(),
  readerRevenueLinks: readerRevenuePositionsSchema,
});
